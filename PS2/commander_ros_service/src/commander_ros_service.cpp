//Commander ROS client, Assignment 2
//Akhil Kandhari
//axk751@case.edu
//Client sends out a frequency and amplitude for wave generation to a service which gives feedback when inputs have been received.

#include <ros/ros.h>
#include <commander_ros_service/CommanderServiceMsg.h>
#include <iostream>
#include <string>
#include <std_msgs/Float64.h>
using namespace std;

std_msgs::Float64 g_vel_cmd;

bool callback(commander_ros_service::CommanderServiceMsgRequest& request, commander_ros_service::CommanderServiceMsgResponse& response)
{
    ROS_INFO("callback activated");

    long int g_freq(request.frequency);
    long int g_amp(request.amplitude);

    ROS_INFO("Amplitude and frequency received for wave generation, publishing values to sin_commander");

    response.receipt = "Wave being generated by sin_commander" ;

    return true;
}

int main(int argc, char **argv)
{
    ros::init(argc, argv, "commander_ros_service");
    ros::NodeHandle n;
    
    ros::ServiceServer service = n.advertiseService("wave_inputs", callback);

    ROS_INFO("Ready to receive wave frequency and amplitude");

    /*
    double dt_commander = 0.1; //Specify 10 HZ as sample rate
    double sample_rate = 1.0/dt_commander;
    ros::Rate naptime(sample_rate);
    
    while(ros::ok())
    {
        //g_vel_cmd = 10 * sin(2 * 3.14 * 10 * dt_commander);
        //ROS_INFO("velocity command = %f", g_vel_cmd);
        ros::spinOnce();
        naptime.sleep();
        dt_commander = dt_commander+sample_rate;
    }
    */

    ros::spin();
    
    return 0;
}